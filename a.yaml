mixed-port: 7893      # 混合端口 HTTP和SOCKS5用一个端口
geodata-mode: true    #【Meta专属】使用geoip.dat数据库(默认：false使用mmdb数据库)
tcp-concurrent: false #【Meta专属】TCP 并发连接所有 IP, 将使用最快握手的 TCP
allow-lan: true       # 允许局域网的连接（可用来共享代理）
bind-address: "*"     # 仅在将allow-lan设置为true时适用
                      # #"*": 绑定所有IP地址
find-process-mode: strict           #匹配所有进程（always/strict/off）
ipv6: false           # 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录
mode: rule            # 规则模式：rule（规则） / global（全局代理）/ direct（全局直连）/ script (脚本)
log-level: info       # 设置日志输出级别 (5 个级别：silent / error / warning / info / debug）
external-controller: 0.0.0.0:9093   #外部控制器,可以使用 RESTful API 来控制你的 clash 内核
global-client-fingerprint: chrome   #全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint
                                    #可选： "chrome","firefox","safari","ios","random","none" options.

geox-url:             #自定义 geodata url
  mmdb: "https://raw.githubusercontent.com/Jard1n/GeoIP/release/GeoIP-CN.mmdb"


profile:
  store-selected: true # 存储 select 选择记录
  store-fake-ip: true  # 持久化 fake-ip
  
sniffer:               # 嗅探域名 可选配置
  enable: true
  parse-pure-ip: true  # 是否使用嗅探结果作为实际访问，默认 true
  sniff:
    TLS:               # TLS 默认嗅探 443
      ports: [443, 8443]
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    QUIC:
      ports: [443, 8443]
      
tun:                   # Tun 配置
  enable: true
  stack: system        # 可选： system/gvisor/mixed；tun 模式堆栈,如无使用问题,建议使用 system 栈;MacOS 用户推荐 gvisor栈
                       # system 使用系统协议栈,可以提供更稳定/全面的 tun 体验,且占用相对其他堆栈更低。 
                       # gvisor 通过在用户空间中实现网络协议栈,可以提供更高的安全性和隔离性,同时可以避免操作系统内核和用户空间之间的切换,从而在特定情况下具有更好的网络处理性能
                       # mixed 混合堆栈,tcp使用 system栈,udp使用 gvisor栈,使用体验可能相对更好
  dns-hijack: [any:53]            # dns劫持,一般设置为 any:53 即可, 即劫持所有53端口的udp流量
# strict_route: true   # 将所有连接路由到tun来防止泄漏，但你的设备将无法其他设备被访问
  auto-route: true     # 自动设置全局路由，可以自动将全局流量路由进入tun网卡。
  auto-detect-interface: true     # 自动识别出口网卡
        
dns:
  enable: true             # 关闭将使用系统 DNS
  ipv6: false              # IPV6解析开关；如果为false，将返回ipv6结果为空
  enhanced-mode: fake-ip   # 模式：redir-host或fake-ip
  listen: 0.0.0.0:53       # DNS监听地址
  fake-ip-range: 198.18.0.1/16    # Fake-IP解析地址池
  fake-ip-filter: ['*.lan', 'cable.auth.com', '*.msftconnecttest.com', '*.msftncsi.com', 'network-test.debian.org', 'detectportal.firefox.com', 'resolver1.opendns.com', '*.srv.nintendo.net', '*.stun.playstation.net', 'xbox.*.microsoft.com', '*.xboxlive.com', 'stun.*', 'global.turn.twilio.com', 'global.stun.twilio.com', 'localhost.*.qq.com', 'localhost.*.weixin.qq.com', '*.logon.battlenet.com.cn', '*.logon.battle.net', '*.blzstatic.cn', 'music.163.com', '*.music.163.com', '*.126.net', 'musicapi.taihe.com', 'music.taihe.com', 'songsearch.kugou.com', 'trackercdn.kugou.com', '*.kuwo.cn', 'api-jooxtt.sanook.com', 'api.joox.com', 'joox.com', 'y.qq.com', '*.y.qq.com', 'streamoc.music.tc.qq.com', 'mobileoc.music.tc.qq.com', 'isure.stream.qqmusic.qq.com', 'dl.stream.qqmusic.qq.com', 'aqqmusic.tc.qq.com', 'amobile.music.tc.qq.com', '*.xiami.com', '*.music.migu.cn', 'music.migu.cn', 'proxy.golang.org', '*.mcdn.bilivideo.cn', '*.cmpassport.com', 'id6.me', 'open.e.189.cn', 'mdn.open.wo.cn', 'opencloud.wostore.cn', 'auth.wosms.cn', '*.jegotrip.com.cn', '*.icitymobile.mobi', '*.pingan.com.cn', '*.cmbchina.com', 'pool.ntp.org', '*.pool.ntp.org', 'ntp.*.com', 'time.*.com', 'ntp?.*.com', 'time?.*.com', 'time.*.gov', 'time.*.edu.cn', '*.ntp.org.cn', 'PDC._msDCS.*.*', 'DC._msDCS.*.*', 'GC._msDCS.*.*']
                          # fake ip 白名单列表'以下地址不会下发fakeip映射用于连接
  nameserver: [https://223.5.5.5/dns-query, https://1.12.12.12/dns-query]


# 建立锚点
pg: &pg {type: select, proxies: [🚀 手动切换, 🇭🇰 香港节点, 🇺🇸 美国节点, 🇸🇬 狮城节点, 🇯🇵 日本节点,  🇨🇳 台湾节点, ♻️ 自动选择, ⚠️ 故障转移, DIRECT]}
p: &p {type: http, interval: 86400, health-check: {enable: true, url: http://www.gstatic.com/generate_204, interval: 1800}}
auto: &auto {type: url-test, lazy: true, url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe1, Subscribe2]}
select: &select {type: select, use: [Subscribe1, Subscribe2]}
fallback: &fallback {type: fallback, lazy: true, url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe1, Subscribe2]}
load-balance: &load-balance {type: load-balance, lazy: true, url: http://www.gstatic.com/generate_204, interval: 900, use: [Subscribe1, Subscribe2]}
c: &c {type: http, behavior: classical, interval: 86400}
d: &d {type: http, behavior: domain, interval: 86400}
i: &i {type: http, behavior: ipcidr, interval: 86400}

# 机场订阅
proxy-providers:
  Subscribe1: {<<: *p, path: ./proxy-providers/Sub1.yaml, url: xxxxx}         
  Subscribe2: {<<: *p, path: ./proxy-providers/Sub2.yaml, url: xxxxx}

proxies: null


# 代理策略
proxy-groups:
  - {name: 🚀 手动切换, type: select, use: [Subscribe1, Subscribe2], proxies: [🇭🇰 香港节点, 🇺🇸 美国节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇨🇳 台湾节点, DIRECT]}
  - {name: 🌏 国外网站, <<: *pg}
  - {name: 📽️ 国际媒体, <<: *pg}
  - {name: 🍎 苹果服务, <<: *pg}
  - {name: 🖥️ 微软服务, <<: *pg}
  - {name: 🌌 谷歌服务, <<: *pg}
  - {name: 📟 电报消息, <<: *pg}
  - {name: 🤖 OpenAI, <<: *pg}
  - {name: 🎮 游戏平台, <<: *pg}
  - {name: 🐟 兜底分流, <<: *pg}

  # 节点地区
  - {name: 🇭🇰 香港节点, <<: *auto, filter: "^(?=.*((?i)🇭🇰|香港|(\b(HK|Hong)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}
  - {name: 🇺🇸 美国节点, <<: *auto, filter: "^(?=.*((?i)🇺🇸|美国|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}
  - {name: 🇸🇬 狮城节点, <<: *auto, filter: "^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}
  - {name: 🇯🇵 日本节点, <<: *auto, filter: "^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b)))(?!.*((?i)回国|校园|游戏|(\b(GAME)\b))).*$"}
  - {name: 🇨🇳 台湾节点, <<: *auto, filter: "(?i)🇹🇼|台湾|(\b(TW|Tai|Taiwan)\b)"}


# 分流规则
rule-providers:
 Lan: {<<: *c, format: text, path: ./rule-providers/Lan.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Lan.list}
 Download: {<<: *c, format: text, path: ./rule-providers/Download.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Download.list}
 Microsoft: {<<: *c, format: text, path: ./rule-providers/Microsoft.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Microsoft.list}
 Google: {<<: *c, format: text, path: ./rule-providers/Google.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Google.list}
 Telegram: {<<: *c, format: text, path: ./rule-providers/Telegram.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Telegram.list}
 Steam: {<<: *c, format: text, path: ./rule-providers/steam.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Steam.list}
 Epic: {<<: *c, format: text, path: ./rule-providers/Epic.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/Epic.list}
 OpenAI: {<<: *c, format: text, path: ./rule-providers/OpenAI.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/OpenAI.list}
 ChinaDomain: {<<: *c, format: text, path: ./rule-providers/ChinaDomain.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/ChinaDomain.list}
 ProxyMedia: {<<: *c, format: text, path: ./rule-providers/ProxyMedia.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/ProxyMedia.list}
 ProxyGFW: {<<: *c, format: text, path: ./rule-providers/ProxyGFW.list,  url: https://github.com/Repcz/Tool/raw/X/Clash/Rules/ProxyGFW.list}
 
rules:
  - RULE-SET,Download,DIRECT
  - RULE-SET,OpenAI,🤖 OpenAI
  - RULE-SET,Apple,🍎 苹果服务
  - RULE-SET,OneDrive,🖥️ 微软服务
  - RULE-SET,Github,🖥️ 微软服务
  - RULE-SET,Microsoft,🖥️ 微软服务
  - RULE-SET,YouTube,🌌 谷歌服务
  - RULE-SET,Google,🌌 谷歌服务
  - RULE-SET,Telegram,📟 电报消息
  - RULE-SET,Twitter,🐦 推特消息
  - RULE-SET,BiliBili,📺 哔哩哔哩
  - RULE-SET,Steam,🎮 游戏平台
  - RULE-SET,Epic,🎮 游戏平台
  - RULE-SET,ProxyMedia,📽️ 国际媒体
  - RULE-SET,ProxyGFW,🌏 国外网站
  - RULE-SET,ChinaDomain,🌏 国内网站
  - RULE-SET,Lan,DIRECT
  - GEOIP,CN,🌏 国内网站
  - MATCH,🐟 兜底分流
